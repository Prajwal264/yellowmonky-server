# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AdminUser implements EntityWrapper {
  createdAt: DateTime!
  email: String!
  id: ID!
  profileImage: String
  teamId: String!
  updatedAt: DateTime!
  username: String!
}

type Channel implements EntityWrapper {
  adminId: String!
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  teamId: String!
  updatedAt: DateTime!
}

type CreateMemberResponse {
  channelId: String!
  id: String!
  teamId: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type EditTeamResponse {
  channels: [String!]!
  teamId: String!
}

"""
parent entity type. This consists the shared logic and fields for all entities.
"""
interface EntityWrapper {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

type Error {
  field: String
  message: String!
  statusCode: Int!
}

type Message implements EntityWrapper {
  childMessages: Message
  content: String!
  createdAt: DateTime!
  creator: User!
  creatorId: String!
  id: ID!
  parentMessage: Message
  parentMessageId: String
  sourceChannel: Channel!
  sourceChannelId: String!
  sourceType: MessageSourceType!
  updatedAt: DateTime!
}

"""The source type of the message"""
enum MessageSourceType {
  CHANNEL
  DIRECT_MESSAGE
}

type Mutation {
  createMessage(content: String!, creatorId: String!, sourceChannelId: String, sourceType: MessageSourceType!): String!
  createUserAndAddToTeam(email: String!, password: String!, teamId: String!, username: String!): CreateMemberResponse!
  editTeam(channels: [String], displayPicture: String, id: String!, members: [String], name: String, ownerId: String!): EditTeamResponse!
  inviteMember(inviteeEmail: String!, inviterId: String!, teamId: String!): Boolean!
  login(email: String!, password: String!): UserResponse!
  registerAdmin(email: String!, password: String!, username: String!): RegisterAdminResponse!
}

type Query {
  allChannelMessages(channelId: String!): [Message!]!
  allChannels(teamId: String!): [Channel]!
  allTeamMembers(teamId: String!): [TeamMember!]!
  channel(channelId: String!): Channel!
  getUsers: [User]!
}

type RegisterAdminResponse implements EntityWrapper {
  createdAt: DateTime!
  email: String!
  id: ID!
  profileImage: String
  teamId: String!
  updatedAt: DateTime!
  username: String!
}

type Subscription {
  newChannelMessage(channelId: String!): Message!
}

type Team implements EntityWrapper {
  createdAt: DateTime!
  displayPicture: String
  id: ID!
  name: String
  ownerId: String!
  updatedAt: DateTime!
}

type TeamMember implements EntityWrapper {
  createdAt: DateTime!
  id: ID!
  role: TeamMemberRole!
  status: TeamMemberStatus!
  teamId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

"""The team member role type"""
enum TeamMemberRole {
  ADMIN
  MEMBER
}

"""The team member status type"""
enum TeamMemberStatus {
  INVITED
  JOINED
  REJECTED
}

type TeamResponse implements EntityWrapper {
  createdAt: DateTime!
  displayPicture: String
  id: ID!
  name: String
  ownerId: String!
  updatedAt: DateTime!
}

type User implements EntityWrapper {
  createdAt: DateTime!
  email: String!
  id: ID!
  profileImage: String
  updatedAt: DateTime!
  username: String!
}

type UserResponse implements EntityWrapper {
  createdAt: DateTime!
  email: String!
  id: ID!
  profileImage: String
  updatedAt: DateTime!
  username: String!
}
